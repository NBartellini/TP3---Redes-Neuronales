{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"VGG 0.53","provenance":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"XX68cuSGSAab"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"RLE0iqcXSMiT"},"source":["#Librerías"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eg6HHw3jC9m_","executionInfo":{"status":"ok","timestamp":1638232516655,"user_tz":180,"elapsed":6434,"user":{"displayName":"SOFÍA CASTELAO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06131527400451509657"}},"outputId":"2b513334-0966-419d-cb5a-3ef139b5661f"},"source":["pip install resnet"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting resnet\n","  Downloading resnet-0.1.tar.gz (5.8 kB)\n","Requirement already satisfied: keras>=2.0 in /usr/local/lib/python3.7/dist-packages (from resnet) (2.7.0)\n","Building wheels for collected packages: resnet\n","  Building wheel for resnet (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for resnet: filename=resnet-0.1-py3-none-any.whl size=10041 sha256=bdb817d135dacef661a47c8ba66b18c932d0a90a5e1f066709cfadbc7988e11f\n","  Stored in directory: /root/.cache/pip/wheels/38/23/58/6e83e34ced7d4772b88e2e86305f94a1ca497bd87937f5e7ec\n","Successfully built resnet\n","Installing collected packages: resnet\n","Successfully installed resnet-0.1\n"]}]},{"cell_type":"code","metadata":{"id":"X_s6Qzt47QDF"},"source":["from keras.applications.resnet import ResNet50"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"hvu7TPODPDMY"},"source":["import numpy as np\n","import pandas as pd\n","from matplotlib import pyplot as plt\n","from tensorflow.keras.models import Sequential, Model,load_model\n","from tensorflow.keras.utils import to_categorical\n","import matplotlib.pyplot as plt"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"zijjiGIRZFUo"},"source":["from tensorflow.keras.preprocessing import image\n","import tensorflow as tf\n","from tensorflow.keras import layers\n","from tensorflow.keras.layers import Dense, GlobalAveragePooling2D, Conv2D, MaxPooling2D, BatchNormalization, Lambda, Input, MaxPooling2D, AveragePooling2D, ZeroPadding2D, Dropout, Flatten, Reshape, Activation\n","from tensorflow.keras.optimizers import Adam, SGD\n","from tensorflow.keras.regularizers import l2\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","from tensorflow.keras.callbacks import ModelCheckpoint, TensorBoard, LearningRateScheduler, EarlyStopping\n","from tensorflow.keras.losses import BinaryCrossentropy"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"jKzkClnpp2Ue"},"source":["from tensorflow.keras.applications.mobilenet_v2 import preprocess_input as preprocess_input_mobilnet \n","from tensorflow.keras.applications.inception_v3 import preprocess_input\n","from tensorflow.keras.applications.inception_v3 import preprocess_input"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wV4vlBjSP-_8","executionInfo":{"status":"ok","timestamp":1638232621362,"user_tz":180,"elapsed":101956,"user":{"displayName":"SOFÍA CASTELAO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06131527400451509657"}},"outputId":"3ab04f31-f358-4897-fa85-f273627faca7"},"source":["\n","from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"markdown","metadata":{"id":"Xi13nmBZSRCq"},"source":["#Cargamos los datos"]},{"cell_type":"code","metadata":{"id":"0MQp8WNoPLZ7"},"source":["X_train = np.load('/content/drive/MyDrive/Redes TPS/TP3/Data/X_train.npy')/255\n","Y_train = np.load('/content/drive/MyDrive/Redes TPS/TP3/Data/y_train.npy')\n","X_test = np.load('/content/drive/MyDrive/Redes TPS/TP3/Data/X_test.npy')/255"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jFHoBhmJWK6l","executionInfo":{"status":"ok","timestamp":1638239395083,"user_tz":180,"elapsed":21,"user":{"displayName":"SOFÍA CASTELAO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06131527400451509657"}},"outputId":"b6fd3802-4ed3-4bb4-8f4e-3d25ed89e2ae"},"source":["print(X_train.shape)\n","print(Y_train.shape)\n","print(X_test.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(50000, 32, 32, 3)\n","(50000, 1)\n","(10000, 32, 32, 3)\n"]}]},{"cell_type":"markdown","metadata":{"id":"wU7__H5R_PDu"},"source":["Transformamos la clasificación (100 clases) en un vector binario con One Hot Encoding"]},{"cell_type":"code","metadata":{"id":"zB6JUotJ_h0L"},"source":["Y_train = to_categorical(Y_train)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"bbUmvFEXWwCa"},"source":["Son imágenes RGB de 32x32 píxeles, es decir, de muy poca resolución. \n"]},{"cell_type":"markdown","metadata":{"id":"ooosQBMDVz-a"},"source":["## Graficamos algunas imágenes"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iHFR-wkjV-fl","executionInfo":{"status":"ok","timestamp":1638239395761,"user_tz":180,"elapsed":695,"user":{"displayName":"SOFÍA CASTELAO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06131527400451509657"}},"outputId":"ab690d87-139c-4de3-ba8e-47a4052ec69a"},"source":["plt.imshow(X_train[0])"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x7fa9c719b510>"]},"metadata":{},"execution_count":44},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BDwXWwK_WIw9","executionInfo":{"status":"ok","timestamp":1638239395763,"user_tz":180,"elapsed":36,"user":{"displayName":"SOFÍA CASTELAO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06131527400451509657"}},"outputId":"e724a5f4-9503-46b6-98ff-0e8a366e7056"},"source":["plt.imshow(X_train[62])"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x7fa9c710afd0>"]},"metadata":{},"execution_count":45},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QN7mRfN0W-DT","executionInfo":{"status":"ok","timestamp":1638239395771,"user_tz":180,"elapsed":39,"user":{"displayName":"SOFÍA CASTELAO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06131527400451509657"}},"outputId":"f4fafeb9-83a9-46cd-fc5f-3ab5868cb9e3"},"source":["print(Y_train[1])"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n"," 0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n"," 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n"," 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n"," 0. 0. 0. 0.]\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CCdolXF6XD4S","executionInfo":{"status":"ok","timestamp":1638239395775,"user_tz":180,"elapsed":37,"user":{"displayName":"SOFÍA CASTELAO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06131527400451509657"}},"outputId":"520e49be-9c7d-494a-8aa4-990fda1b793c"},"source":["print(Y_train[62])"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n"," 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n"," 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n"," 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.\n"," 0. 0. 0. 0.]\n"]}]},{"cell_type":"markdown","metadata":{"id":"h_lo36ehSuEK"},"source":["#Data Augmentation"]},{"cell_type":"code","metadata":{"id":"PRDNGf7XTBzl"},"source":["epochs = 20\n","batch = 64\n","lr = 0.001\n","loss = 'categorical_crossentropy'\n","optimizer = SGD()#Adam(learning_rate=lr)\n","metrics = ['Accuracy']\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"HK5RQ8oVLYW4"},"source":["\n","There are many types of data augmentation that could be applied. Given that the dataset is comprised of small photos of objects, we do not want to use augmentation that distorts the images too much, so that useful features in the images can be preserved and used.\n","\n","The types of random augmentations that could be useful include a horizontal flip, minor shifts of the image, and perhaps small zooming or cropping of the image."]},{"cell_type":"code","metadata":{"id":"i4a10UqY_WJ0"},"source":["nb_train_samples = 50000\n","nb_validation_samples = 10000\n","batch= 64"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"SE3VbTFuLQuT"},"source":["# create data generator\n","datagen = ImageDataGenerator(zoom_range=0.2, rotation_range = 5, horizontal_flip=True, validation_split=0.2)\n","# prepare iterator\n","it_train = datagen.flow(X_train, Y_train,shuffle=True, seed=42, batch_size=batch, subset='training')\n","it_valid = datagen.flow(X_train, Y_train,shuffle=True, seed=42, batch_size=batch, subset='validation')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3FBgzXEb9Pnh","executionInfo":{"status":"ok","timestamp":1638239396458,"user_tz":180,"elapsed":15,"user":{"displayName":"SOFÍA CASTELAO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06131527400451509657"}},"outputId":"8d7fe6b7-863c-483f-d4c1-8a166486a87e"},"source":["len(it_train), len(it_valid), it_train"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(625, 157, <keras.preprocessing.image.NumpyArrayIterator at 0x7fa9c7116550>)"]},"metadata":{},"execution_count":51}]},{"cell_type":"markdown","metadata":{"id":"Tb4n4XA1Sxsm"},"source":["#Modelo "]},{"cell_type":"code","metadata":{"id":"-3UJrTpUcnzZ"},"source":["model = ResNet50(include_top=False,weights=\"imagenet\", input_shape=(32,32,3), classes=100 )"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"5fd_RVSjcnza"},"source":["for layer in model.layers:\n","  layer.trainable = False #congelo los pesos de la resnet, no se entrene. Para agregarle las capas al final"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"l8CTIRuIZTTF"},"source":["input_layer = model.layers[0].input"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Q5SI60fcZa-t"},"source":["output_resnet = model.layers[-1].output"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"MQDWAIHqZg91"},"source":["x = GlobalAveragePooling2D()(output_resnet)\n","x = Dense(100, activation=\"softmax\")(x)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"tjd8zlVLbOI8","colab":{"base_uri":"https://localhost:8080/","height":165},"executionInfo":{"status":"error","timestamp":1638216220521,"user_tz":180,"elapsed":415,"user":{"displayName":"Nicole Bartellini Huapalla","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhQqDlbh0pzuqnEKiVpxb5_bqNuiNFERy7yS8-I1Q=s64","userId":"07239068753201303887"}},"outputId":"04525ad8-8a83-45ca-8eca-2e25f0243757"},"source":["model_2 = Model(inputs=input_layer,outputs=x)"],"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-477c2d8fb034>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mmodel_2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mModel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minput_layer\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0moutputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'Model' is not defined"]}]},{"cell_type":"code","metadata":{"id":"DovbStJCcnzb"},"source":["epochs = 20\n","batch = 64\n","lr = 0.000001\n","loss = 'categorical_crossentropy'\n","optimizer = Adam(learning_rate=lr)\n","metrics = ['Accuracy']\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"xskNnf3ucnzb"},"source":["model_2.compile(loss=loss, optimizer=optimizer, metrics=metrics)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Kcc2_6yoMbCb","outputId":"684e1a1c-ffc0-4da9-e2fb-fb83f850c988"},"source":["checkpoint = ModelCheckpoint('/content/drive/MyDrive/Redes TPS/TP3/bestmodel_dag_1.hdf5', monitor='val_Accuracy', mode = 'max', verbose=1, save_best_only=True)\n","history = model_2.fit_generator(it_train, validation_data=it_valid, validation_steps= nb_validation_samples//batch, epochs=epochs, callbacks=checkpoint)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:2: UserWarning: `Model.fit_generator` is deprecated and will be removed in a future version. Please use `Model.fit`, which supports generators.\n","  \n"]},{"output_type":"stream","name":"stdout","text":["Epoch 1/100\n","625/625 [==============================] - ETA: 0s - loss: 4.2635 - Accuracy: 0.1235\n","Epoch 00001: val_Accuracy improved from -inf to 0.01072, saving model to /content/drive/MyDrive/Redes TPS/TP3/bestmodel_dag_1.hdf5\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/keras/engine/functional.py:1410: CustomMaskWarning: Custom mask layers require a config and must override get_config. When loading, the custom mask layer must be passed to the custom_objects argument.\n","  layer_config = serialize_layer_fn(layer)\n"]},{"output_type":"stream","name":"stdout","text":["\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r625/625 [==============================] - 94s 135ms/step - loss: 4.2635 - Accuracy: 0.1235 - val_loss: 107.9275 - val_Accuracy: 0.0107\n","Epoch 2/100\n","625/625 [==============================] - ETA: 0s - loss: 3.5155 - Accuracy: 0.1919\n","Epoch 00002: val_Accuracy improved from 0.01072 to 0.19772, saving model to /content/drive/MyDrive/Redes TPS/TP3/bestmodel_dag_1.hdf5\n","625/625 [==============================] - 83s 133ms/step - loss: 3.5155 - Accuracy: 0.1919 - val_loss: 3.6608 - val_Accuracy: 0.1977\n","Epoch 3/100\n","625/625 [==============================] - ETA: 0s - loss: 2.7370 - Accuracy: 0.3022\n","Epoch 00003: val_Accuracy improved from 0.19772 to 0.28165, saving model to /content/drive/MyDrive/Redes TPS/TP3/bestmodel_dag_1.hdf5\n","625/625 [==============================] - 83s 133ms/step - loss: 2.7370 - Accuracy: 0.3022 - val_loss: 2.9008 - val_Accuracy: 0.2817\n","Epoch 4/100\n","625/625 [==============================] - ETA: 0s - loss: 2.4343 - Accuracy: 0.3634\n","Epoch 00004: val_Accuracy did not improve from 0.28165\n","625/625 [==============================] - 79s 127ms/step - loss: 2.4343 - Accuracy: 0.3634 - val_loss: 3.2111 - val_Accuracy: 0.2584\n","Epoch 5/100\n","625/625 [==============================] - ETA: 0s - loss: 2.2552 - Accuracy: 0.4003\n","Epoch 00005: val_Accuracy improved from 0.28165 to 0.32041, saving model to /content/drive/MyDrive/Redes TPS/TP3/bestmodel_dag_1.hdf5\n","625/625 [==============================] - 83s 133ms/step - loss: 2.2552 - Accuracy: 0.4003 - val_loss: 2.7893 - val_Accuracy: 0.3204\n","Epoch 6/100\n","625/625 [==============================] - ETA: 0s - loss: 2.1029 - Accuracy: 0.4315\n","Epoch 00006: val_Accuracy did not improve from 0.32041\n","625/625 [==============================] - 79s 127ms/step - loss: 2.1029 - Accuracy: 0.4315 - val_loss: 3.0421 - val_Accuracy: 0.2909\n","Epoch 7/100\n","625/625 [==============================] - ETA: 0s - loss: 1.9831 - Accuracy: 0.4600\n","Epoch 00007: val_Accuracy did not improve from 0.32041\n","625/625 [==============================] - 79s 126ms/step - loss: 1.9831 - Accuracy: 0.4600 - val_loss: 2.8259 - val_Accuracy: 0.3132\n","Epoch 8/100\n","625/625 [==============================] - ETA: 0s - loss: 1.8684 - Accuracy: 0.4870\n","Epoch 00008: val_Accuracy improved from 0.32041 to 0.35767, saving model to /content/drive/MyDrive/Redes TPS/TP3/bestmodel_dag_1.hdf5\n","625/625 [==============================] - 83s 132ms/step - loss: 1.8684 - Accuracy: 0.4870 - val_loss: 2.6284 - val_Accuracy: 0.3577\n","Epoch 9/100\n","625/625 [==============================] - ETA: 0s - loss: 1.7588 - Accuracy: 0.5085\n","Epoch 00009: val_Accuracy did not improve from 0.35767\n","625/625 [==============================] - 79s 127ms/step - loss: 1.7588 - Accuracy: 0.5085 - val_loss: 3.1873 - val_Accuracy: 0.3045\n","Epoch 10/100\n","625/625 [==============================] - ETA: 0s - loss: 1.6705 - Accuracy: 0.5326\n","Epoch 00010: val_Accuracy did not improve from 0.35767\n","625/625 [==============================] - 79s 126ms/step - loss: 1.6705 - Accuracy: 0.5326 - val_loss: 3.1932 - val_Accuracy: 0.3080\n","Epoch 11/100\n","625/625 [==============================] - ETA: 0s - loss: 1.5897 - Accuracy: 0.5468\n","Epoch 00011: val_Accuracy improved from 0.35767 to 0.40074, saving model to /content/drive/MyDrive/Redes TPS/TP3/bestmodel_dag_1.hdf5\n","625/625 [==============================] - 83s 133ms/step - loss: 1.5897 - Accuracy: 0.5468 - val_loss: 2.4580 - val_Accuracy: 0.4007\n","Epoch 12/100\n","625/625 [==============================] - ETA: 0s - loss: 1.4790 - Accuracy: 0.5746\n","Epoch 00012: val_Accuracy did not improve from 0.40074\n","625/625 [==============================] - 79s 126ms/step - loss: 1.4790 - Accuracy: 0.5746 - val_loss: 3.0404 - val_Accuracy: 0.3354\n","Epoch 13/100\n","625/625 [==============================] - ETA: 0s - loss: 1.4108 - Accuracy: 0.5892\n","Epoch 00013: val_Accuracy did not improve from 0.40074\n","625/625 [==============================] - 79s 127ms/step - loss: 1.4108 - Accuracy: 0.5892 - val_loss: 3.3326 - val_Accuracy: 0.3201\n","Epoch 14/100\n","625/625 [==============================] - ETA: 0s - loss: 1.3255 - Accuracy: 0.6121\n","Epoch 00014: val_Accuracy did not improve from 0.40074\n","625/625 [==============================] - 79s 126ms/step - loss: 1.3255 - Accuracy: 0.6121 - val_loss: 2.7758 - val_Accuracy: 0.3984\n","Epoch 15/100\n","625/625 [==============================] - ETA: 0s - loss: 1.2612 - Accuracy: 0.6281\n","Epoch 00015: val_Accuracy improved from 0.40074 to 0.42568, saving model to /content/drive/MyDrive/Redes TPS/TP3/bestmodel_dag_1.hdf5\n","625/625 [==============================] - 83s 133ms/step - loss: 1.2612 - Accuracy: 0.6281 - val_loss: 2.4615 - val_Accuracy: 0.4257\n","Epoch 16/100\n","625/625 [==============================] - ETA: 0s - loss: 1.1761 - Accuracy: 0.6496\n","Epoch 00016: val_Accuracy improved from 0.42568 to 0.42638, saving model to /content/drive/MyDrive/Redes TPS/TP3/bestmodel_dag_1.hdf5\n","625/625 [==============================] - 84s 134ms/step - loss: 1.1761 - Accuracy: 0.6496 - val_loss: 2.4817 - val_Accuracy: 0.4264\n","Epoch 17/100\n","625/625 [==============================] - ETA: 0s - loss: 1.0994 - Accuracy: 0.6698\n","Epoch 00017: val_Accuracy did not improve from 0.42638\n","625/625 [==============================] - 79s 127ms/step - loss: 1.0994 - Accuracy: 0.6698 - val_loss: 2.8013 - val_Accuracy: 0.3941\n","Epoch 18/100\n","625/625 [==============================] - ETA: 0s - loss: 1.0428 - Accuracy: 0.6861\n","Epoch 00018: val_Accuracy improved from 0.42638 to 0.43760, saving model to /content/drive/MyDrive/Redes TPS/TP3/bestmodel_dag_1.hdf5\n","625/625 [==============================] - 83s 132ms/step - loss: 1.0428 - Accuracy: 0.6861 - val_loss: 2.4670 - val_Accuracy: 0.4376\n","Epoch 19/100\n","625/625 [==============================] - ETA: 0s - loss: 0.9626 - Accuracy: 0.7056\n","Epoch 00019: val_Accuracy did not improve from 0.43760\n","625/625 [==============================] - 79s 127ms/step - loss: 0.9626 - Accuracy: 0.7056 - val_loss: 3.3495 - val_Accuracy: 0.3532\n","Epoch 20/100\n","625/625 [==============================] - ETA: 0s - loss: 0.9025 - Accuracy: 0.7210\n","Epoch 00020: val_Accuracy did not improve from 0.43760\n","625/625 [==============================] - 79s 126ms/step - loss: 0.9025 - Accuracy: 0.7210 - val_loss: 2.7815 - val_Accuracy: 0.4223\n","Epoch 21/100\n","625/625 [==============================] - ETA: 0s - loss: 0.8541 - Accuracy: 0.7353\n","Epoch 00021: val_Accuracy improved from 0.43760 to 0.44902, saving model to /content/drive/MyDrive/Redes TPS/TP3/bestmodel_dag_1.hdf5\n","625/625 [==============================] - 83s 133ms/step - loss: 0.8541 - Accuracy: 0.7353 - val_loss: 2.5464 - val_Accuracy: 0.4490\n","Epoch 22/100\n","625/625 [==============================] - ETA: 0s - loss: 0.7958 - Accuracy: 0.7505\n","Epoch 00022: val_Accuracy did not improve from 0.44902\n","625/625 [==============================] - 80s 128ms/step - loss: 0.7958 - Accuracy: 0.7505 - val_loss: 2.8797 - val_Accuracy: 0.4129\n","Epoch 23/100\n","625/625 [==============================] - ETA: 0s - loss: 0.7659 - Accuracy: 0.7618\n","Epoch 00023: val_Accuracy improved from 0.44902 to 0.45333, saving model to /content/drive/MyDrive/Redes TPS/TP3/bestmodel_dag_1.hdf5\n","625/625 [==============================] - 84s 134ms/step - loss: 0.7659 - Accuracy: 0.7618 - val_loss: 2.5870 - val_Accuracy: 0.4533\n","Epoch 24/100\n","625/625 [==============================] - ETA: 0s - loss: 0.6959 - Accuracy: 0.7814\n","Epoch 00024: val_Accuracy did not improve from 0.45333\n","625/625 [==============================] - 80s 127ms/step - loss: 0.6959 - Accuracy: 0.7814 - val_loss: 3.1967 - val_Accuracy: 0.4026\n","Epoch 25/100\n","625/625 [==============================] - ETA: 0s - loss: 0.6696 - Accuracy: 0.7869\n","Epoch 00025: val_Accuracy did not improve from 0.45333\n","625/625 [==============================] - 79s 126ms/step - loss: 0.6696 - Accuracy: 0.7869 - val_loss: 2.9267 - val_Accuracy: 0.4252\n","Epoch 26/100\n","625/625 [==============================] - ETA: 0s - loss: 0.6324 - Accuracy: 0.7983\n","Epoch 00026: val_Accuracy did not improve from 0.45333\n","625/625 [==============================] - 79s 126ms/step - loss: 0.6324 - Accuracy: 0.7983 - val_loss: 3.2100 - val_Accuracy: 0.4111\n","Epoch 27/100\n","625/625 [==============================] - ETA: 0s - loss: 0.6076 - Accuracy: 0.8068\n","Epoch 00027: val_Accuracy did not improve from 0.45333\n","625/625 [==============================] - 79s 126ms/step - loss: 0.6076 - Accuracy: 0.8068 - val_loss: 3.1566 - val_Accuracy: 0.4210\n","Epoch 28/100\n","625/625 [==============================] - ETA: 0s - loss: 0.5722 - Accuracy: 0.8179\n","Epoch 00028: val_Accuracy did not improve from 0.45333\n","625/625 [==============================] - 79s 126ms/step - loss: 0.5722 - Accuracy: 0.8179 - val_loss: 4.1821 - val_Accuracy: 0.3173\n","Epoch 29/100\n","625/625 [==============================] - ETA: 0s - loss: 0.5478 - Accuracy: 0.8224\n","Epoch 00029: val_Accuracy did not improve from 0.45333\n","625/625 [==============================] - 79s 127ms/step - loss: 0.5478 - Accuracy: 0.8224 - val_loss: 3.1726 - val_Accuracy: 0.4292\n","Epoch 30/100\n","625/625 [==============================] - ETA: 0s - loss: 0.5246 - Accuracy: 0.8325\n","Epoch 00030: val_Accuracy did not improve from 0.45333\n","625/625 [==============================] - 79s 126ms/step - loss: 0.5246 - Accuracy: 0.8325 - val_loss: 3.0931 - val_Accuracy: 0.4404\n","Epoch 31/100\n","625/625 [==============================] - ETA: 0s - loss: 0.4781 - Accuracy: 0.8460\n","Epoch 00031: val_Accuracy improved from 0.45333 to 0.46094, saving model to /content/drive/MyDrive/Redes TPS/TP3/bestmodel_dag_1.hdf5\n","625/625 [==============================] - 83s 133ms/step - loss: 0.4781 - Accuracy: 0.8460 - val_loss: 3.0212 - val_Accuracy: 0.4609\n","Epoch 32/100\n","625/625 [==============================] - ETA: 0s - loss: 0.4730 - Accuracy: 0.8497\n","Epoch 00032: val_Accuracy did not improve from 0.46094\n","625/625 [==============================] - 80s 127ms/step - loss: 0.4730 - Accuracy: 0.8497 - val_loss: 4.0696 - val_Accuracy: 0.3855\n","Epoch 33/100\n","625/625 [==============================] - ETA: 0s - loss: 0.4399 - Accuracy: 0.8580\n","Epoch 00033: val_Accuracy did not improve from 0.46094\n","625/625 [==============================] - 79s 126ms/step - loss: 0.4399 - Accuracy: 0.8580 - val_loss: 3.1154 - val_Accuracy: 0.4544\n","Epoch 34/100\n","625/625 [==============================] - ETA: 0s - loss: 0.4808 - Accuracy: 0.8484\n","Epoch 00034: val_Accuracy did not improve from 0.46094\n","625/625 [==============================] - 79s 127ms/step - loss: 0.4808 - Accuracy: 0.8484 - val_loss: 3.0111 - val_Accuracy: 0.4566\n","Epoch 35/100\n","625/625 [==============================] - ETA: 0s - loss: 0.4120 - Accuracy: 0.8671\n","Epoch 00035: val_Accuracy did not improve from 0.46094\n","625/625 [==============================] - 79s 126ms/step - loss: 0.4120 - Accuracy: 0.8671 - val_loss: 3.1108 - val_Accuracy: 0.4523\n","Epoch 36/100\n","625/625 [==============================] - ETA: 0s - loss: 0.3939 - Accuracy: 0.8730\n","Epoch 00036: val_Accuracy did not improve from 0.46094\n","625/625 [==============================] - 79s 126ms/step - loss: 0.3939 - Accuracy: 0.8730 - val_loss: 3.6058 - val_Accuracy: 0.4027\n","Epoch 37/100\n","625/625 [==============================] - ETA: 0s - loss: 0.3771 - Accuracy: 0.8783\n","Epoch 00037: val_Accuracy did not improve from 0.46094\n","625/625 [==============================] - 79s 127ms/step - loss: 0.3771 - Accuracy: 0.8783 - val_loss: 3.2122 - val_Accuracy: 0.4449\n","Epoch 38/100\n","225/625 [=========>....................] - ETA: 45s - loss: 0.3213 - Accuracy: 0.8980"]}]},{"cell_type":"markdown","metadata":{"id":"OaBzxwpeXoXS"},"source":["#Con dropout + Batch Normalization más capas - Variamos los valores de dropout"]},{"cell_type":"code","metadata":{"id":"RBkRFuKcOKu_"},"source":[" "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"UvThQMgmXoXa"},"source":["model_7 = Sequential()\n","model_7.add(Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same', input_shape=(32, 32, 3)))\n","model_7.add(Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))\n","model_7.add(MaxPooling2D((2, 2)))\n","model_7.add(BatchNormalization())\n","model_7.add(Dropout(0.5))\n","model_7.add(Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same', input_shape=(32, 32, 3)))\n","model_7.add(Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))\n","model_7.add(MaxPooling2D((2, 2)))\n","model_7.add(BatchNormalization())\n","model_7.add(Dropout(0.5))\n","model_7.add(Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same', input_shape=(32, 32, 3)))\n","model_7.add(Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))\n","model_7.add(MaxPooling2D((2, 2)))\n","model_7.add(BatchNormalization())\n","model_7.add(Dropout(0.5))\n","model_7.add(Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))\n","model_7.add(Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))\n","model_7.add(MaxPooling2D((2, 2)))\n","model_7.add(BatchNormalization())\n","model_7.add(Dropout(0.25))\n","model_7.add(Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))\n","model_7.add(Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))\n","model_7.add(MaxPooling2D((2, 2)))\n","model_7.add(BatchNormalization())\n","model_7.add(Dropout(0.1))\n","model_7.add(Conv2D(128, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))\n","model_7.add(Conv2D(128, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))\n","model_7.add(MaxPooling2D((2, 2)))\n","model_7.add(BatchNormalization())\n","model_7.add(Conv2D(128, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))\n","model_7.add(Conv2D(128, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='same'))\n","model_7.add(MaxPooling2D((2, 2)))\n","model_7.add(BatchNormalization())\n","model_7.add(Dropout(0.2))\n","model_7.add(Flatten())\n","model_7.add(Dense(64, activation='relu', kernel_initializer='he_uniform'))\n","model_7.add(Dropout(0.2))\n","model_7.add(Dense(128, activation='relu', kernel_initializer='he_uniform'))\n","model_7.add(Dropout(0.2))\n","model_7.add(Dense(100, activation='softmax'))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oFAlRkw7XoXa","executionInfo":{"status":"ok","timestamp":1638220364842,"user_tz":180,"elapsed":322,"user":{"displayName":"Nicole Bartellini Huapalla","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhQqDlbh0pzuqnEKiVpxb5_bqNuiNFERy7yS8-I1Q=s64","userId":"07239068753201303887"}},"outputId":"603e2d0f-6a9c-4bc8-bc83-ae1212e1c589"},"source":["epochs = 60 #si no 50\n","batch = 64\n","lr = 0.001\n","loss = 'categorical_crossentropy'\n","optimizer = Adam(lr=lr)\n","metrics = ['Accuracy']"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/keras/optimizer_v2/adam.py:105: UserWarning: The `lr` argument is deprecated, use `learning_rate` instead.\n","  super(Adam, self).__init__(name, **kwargs)\n"]}]},{"cell_type":"code","metadata":{"id":"lw3wLhXEXoXb"},"source":["model_7.compile(loss=loss, optimizer=optimizer, metrics=metrics)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"jdUEmrxTsUkl"},"source":["epochs =20"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"D7uxW4juXoXb","executionInfo":{"status":"ok","timestamp":1638228175086,"user_tz":180,"elapsed":739507,"user":{"displayName":"Nicole Bartellini Huapalla","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhQqDlbh0pzuqnEKiVpxb5_bqNuiNFERy7yS8-I1Q=s64","userId":"07239068753201303887"}},"outputId":"91e57ef1-55ef-4774-d167-8ead76f34cf9"},"source":["checkpoint = ModelCheckpoint('/content/drive/MyDrive/Redes TPS/TP3/bestmodel_dbn_2.hdf5', monitor='val_Accuracy', mode = 'max', verbose=1, save_best_only=True)\n","history = model_7.fit_generator(it_train, validation_data=it_valid, validation_steps= nb_validation_samples//batch, epochs=epochs, callbacks=checkpoint)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/20\n","  2/625 [..............................] - ETA: 32s - loss: 1.3327 - Accuracy: 0.6016"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:2: UserWarning: `Model.fit_generator` is deprecated and will be removed in a future version. Please use `Model.fit`, which supports generators.\n","  \n"]},{"output_type":"stream","name":"stdout","text":["625/625 [==============================] - ETA: 0s - loss: 1.2766 - Accuracy: 0.6461\n","Epoch 00001: val_Accuracy improved from -inf to 0.51803, saving model to /content/drive/MyDrive/Redes TPS/TP3/bestmodel_dbn_2.hdf5\n","625/625 [==============================] - 37s 60ms/step - loss: 1.2766 - Accuracy: 0.6461 - val_loss: 1.9580 - val_Accuracy: 0.5180\n","Epoch 2/20\n","625/625 [==============================] - ETA: 0s - loss: 1.2884 - Accuracy: 0.6436\n","Epoch 00002: val_Accuracy did not improve from 0.51803\n","625/625 [==============================] - 37s 59ms/step - loss: 1.2884 - Accuracy: 0.6436 - val_loss: 2.0818 - val_Accuracy: 0.5035\n","Epoch 3/20\n","625/625 [==============================] - ETA: 0s - loss: 1.2768 - Accuracy: 0.6453\n","Epoch 00003: val_Accuracy did not improve from 0.51803\n","625/625 [==============================] - 37s 59ms/step - loss: 1.2768 - Accuracy: 0.6453 - val_loss: 2.1165 - val_Accuracy: 0.4956\n","Epoch 4/20\n","625/625 [==============================] - ETA: 0s - loss: 1.2750 - Accuracy: 0.6468\n","Epoch 00004: val_Accuracy did not improve from 0.51803\n","625/625 [==============================] - 36s 58ms/step - loss: 1.2750 - Accuracy: 0.6468 - val_loss: 2.0051 - val_Accuracy: 0.5136\n","Epoch 5/20\n","624/625 [============================>.] - ETA: 0s - loss: 1.2627 - Accuracy: 0.6508\n","Epoch 00005: val_Accuracy improved from 0.51803 to 0.52214, saving model to /content/drive/MyDrive/Redes TPS/TP3/bestmodel_dbn_2.hdf5\n","625/625 [==============================] - 37s 60ms/step - loss: 1.2627 - Accuracy: 0.6509 - val_loss: 1.9406 - val_Accuracy: 0.5221\n","Epoch 6/20\n","625/625 [==============================] - ETA: 0s - loss: 1.2565 - Accuracy: 0.6511\n","Epoch 00006: val_Accuracy did not improve from 0.52214\n","625/625 [==============================] - 37s 59ms/step - loss: 1.2565 - Accuracy: 0.6511 - val_loss: 2.0064 - val_Accuracy: 0.5183\n","Epoch 7/20\n","625/625 [==============================] - ETA: 0s - loss: 1.2704 - Accuracy: 0.6515\n","Epoch 00007: val_Accuracy improved from 0.52214 to 0.52454, saving model to /content/drive/MyDrive/Redes TPS/TP3/bestmodel_dbn_2.hdf5\n","625/625 [==============================] - 37s 60ms/step - loss: 1.2704 - Accuracy: 0.6515 - val_loss: 1.9448 - val_Accuracy: 0.5245\n","Epoch 8/20\n","625/625 [==============================] - ETA: 0s - loss: 1.2527 - Accuracy: 0.6539\n","Epoch 00008: val_Accuracy did not improve from 0.52454\n","625/625 [==============================] - 37s 59ms/step - loss: 1.2527 - Accuracy: 0.6539 - val_loss: 1.9723 - val_Accuracy: 0.5144\n","Epoch 9/20\n","625/625 [==============================] - ETA: 0s - loss: 1.2453 - Accuracy: 0.6550\n","Epoch 00009: val_Accuracy improved from 0.52454 to 0.53225, saving model to /content/drive/MyDrive/Redes TPS/TP3/bestmodel_dbn_2.hdf5\n","625/625 [==============================] - 38s 60ms/step - loss: 1.2453 - Accuracy: 0.6550 - val_loss: 1.9037 - val_Accuracy: 0.5323\n","Epoch 10/20\n","624/625 [============================>.] - ETA: 0s - loss: 1.2508 - Accuracy: 0.6542\n","Epoch 00010: val_Accuracy did not improve from 0.53225\n","625/625 [==============================] - 36s 58ms/step - loss: 1.2504 - Accuracy: 0.6543 - val_loss: 2.0630 - val_Accuracy: 0.5098\n","Epoch 11/20\n","625/625 [==============================] - ETA: 0s - loss: 1.2478 - Accuracy: 0.6538\n","Epoch 00011: val_Accuracy did not improve from 0.53225\n","625/625 [==============================] - 36s 58ms/step - loss: 1.2478 - Accuracy: 0.6538 - val_loss: 2.0288 - val_Accuracy: 0.5092\n","Epoch 12/20\n","625/625 [==============================] - ETA: 0s - loss: 1.2317 - Accuracy: 0.6587\n","Epoch 00012: val_Accuracy did not improve from 0.53225\n","625/625 [==============================] - 37s 59ms/step - loss: 1.2317 - Accuracy: 0.6587 - val_loss: 1.9946 - val_Accuracy: 0.5168\n","Epoch 13/20\n","624/625 [============================>.] - ETA: 0s - loss: 1.2379 - Accuracy: 0.6563\n","Epoch 00013: val_Accuracy did not improve from 0.53225\n","625/625 [==============================] - 37s 59ms/step - loss: 1.2383 - Accuracy: 0.6563 - val_loss: 2.0094 - val_Accuracy: 0.5157\n","Epoch 14/20\n","625/625 [==============================] - ETA: 0s - loss: 1.2359 - Accuracy: 0.6580\n","Epoch 00014: val_Accuracy did not improve from 0.53225\n","625/625 [==============================] - 36s 57ms/step - loss: 1.2359 - Accuracy: 0.6580 - val_loss: 1.9592 - val_Accuracy: 0.5242\n","Epoch 15/20\n","624/625 [============================>.] - ETA: 0s - loss: 1.2257 - Accuracy: 0.6576\n","Epoch 00015: val_Accuracy did not improve from 0.53225\n","625/625 [==============================] - 36s 58ms/step - loss: 1.2257 - Accuracy: 0.6575 - val_loss: 1.9944 - val_Accuracy: 0.5206\n","Epoch 16/20\n","625/625 [==============================] - ETA: 0s - loss: 1.2256 - Accuracy: 0.6612\n","Epoch 00016: val_Accuracy did not improve from 0.53225\n","625/625 [==============================] - 36s 58ms/step - loss: 1.2256 - Accuracy: 0.6612 - val_loss: 1.9938 - val_Accuracy: 0.5196\n","Epoch 17/20\n","624/625 [============================>.] - ETA: 0s - loss: 1.2237 - Accuracy: 0.6614\n","Epoch 00017: val_Accuracy did not improve from 0.53225\n","625/625 [==============================] - 36s 58ms/step - loss: 1.2236 - Accuracy: 0.6614 - val_loss: 2.1711 - val_Accuracy: 0.4920\n","Epoch 18/20\n","625/625 [==============================] - ETA: 0s - loss: 1.2117 - Accuracy: 0.6643\n","Epoch 00018: val_Accuracy did not improve from 0.53225\n","625/625 [==============================] - 36s 57ms/step - loss: 1.2117 - Accuracy: 0.6643 - val_loss: 1.9965 - val_Accuracy: 0.5219\n","Epoch 19/20\n","625/625 [==============================] - ETA: 0s - loss: 1.2206 - Accuracy: 0.6637\n","Epoch 00019: val_Accuracy did not improve from 0.53225\n","625/625 [==============================] - 40s 64ms/step - loss: 1.2206 - Accuracy: 0.6637 - val_loss: 2.0470 - val_Accuracy: 0.5126\n","Epoch 20/20\n","624/625 [============================>.] - ETA: 0s - loss: 1.2027 - Accuracy: 0.6649\n","Epoch 00020: val_Accuracy did not improve from 0.53225\n","625/625 [==============================] - 36s 57ms/step - loss: 1.2029 - Accuracy: 0.6647 - val_loss: 2.0392 - val_Accuracy: 0.5149\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":298},"id":"V3AJzpTrXoXb","executionInfo":{"status":"ok","timestamp":1638222840952,"user_tz":180,"elapsed":732,"user":{"displayName":"Nicole Bartellini Huapalla","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhQqDlbh0pzuqnEKiVpxb5_bqNuiNFERy7yS8-I1Q=s64","userId":"07239068753201303887"}},"outputId":"4c4cf439-37f5-4ae3-aa85-6d995c3d8e2b"},"source":["# plot loss\n","plt.subplot(211)\n","plt.title('Cross Entropy Loss')\n","plt.plot(history.history['loss'], color='blue', label='train')\n","plt.plot(history.history['val_loss'], color='orange', label='test')\n","# plot accuracy\n","plt.subplot(212)\n","plt.title('Classification Accuracy')\n","plt.plot(history.history['Accuracy'], color='blue', label='train')\n","plt.plot(history.history['val_Accuracy'], color='orange', label='test')"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7feae4f8ebd0>]"]},"metadata":{},"execution_count":18},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"9ucnnHXnsdVr"},"source":["# The model weights (that are considered the best) are loaded into the model.\n","model_7.load_weights('/content/drive/MyDrive/Redes TPS/TP3/bestmodel_dbn.hdf5')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"J3spoYDHvqFo"},"source":["# The model weights (that are considered the best) are loaded into the model.\n","model_7.load_weights('/content/drive/MyDrive/Redes TPS/TP3/bestmodel_dbn_2.hdf5')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"PqQUkroczMYD"},"source":["#Generamos el submit"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pbp9V92Ix_7E","executionInfo":{"status":"ok","timestamp":1638068913955,"user_tz":180,"elapsed":21858,"user":{"displayName":"Nik Bartellini","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghuyvnf80qFNTH1bxsIHTehXh7_jYsh5qoMsqLwSw=s64","userId":"16632623477956018451"}},"outputId":"19dd928f-65d2-4ecb-db81-92346bb937c4"},"source":["model_7.evaluate(X_train,Y_train)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1563/1563 [==============================] - 14s 9ms/step - loss: 2.0066 - Accuracy: 0.4600\n"]},{"output_type":"execute_result","data":{"text/plain":["[2.0065863132476807, 0.46004000306129456]"]},"metadata":{},"execution_count":51}]},{"cell_type":"code","metadata":{"id":"fX8WvSI1zQEQ"},"source":["y_pred = model_2.predict(X_test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"bd1Rs7lbzYKe"},"source":["y_final = y_pred.argmax(axis=1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"2gU-eJpWzogi"},"source":["df = pd.DataFrame(data=y_final, columns = ['label'])\n","df.index.name='Id'"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":455},"id":"IW7KB8QdyfjW","executionInfo":{"status":"ok","timestamp":1638218034614,"user_tz":180,"elapsed":16,"user":{"displayName":"Nicole Bartellini Huapalla","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhQqDlbh0pzuqnEKiVpxb5_bqNuiNFERy7yS8-I1Q=s64","userId":"07239068753201303887"}},"outputId":"9467b1c5-1437-439f-cce0-3d9896cab6f0"},"source":["df"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>label</th>\n","    </tr>\n","    <tr>\n","      <th>Id</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>68</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>55</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>51</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>71</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>9995</th>\n","      <td>39</td>\n","    </tr>\n","    <tr>\n","      <th>9996</th>\n","      <td>14</td>\n","    </tr>\n","    <tr>\n","      <th>9997</th>\n","      <td>51</td>\n","    </tr>\n","    <tr>\n","      <th>9998</th>\n","      <td>42</td>\n","    </tr>\n","    <tr>\n","      <th>9999</th>\n","      <td>14</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>10000 rows × 1 columns</p>\n","</div>"],"text/plain":["      label\n","Id         \n","0        68\n","1         8\n","2        55\n","3        51\n","4        71\n","...     ...\n","9995     39\n","9996     14\n","9997     51\n","9998     42\n","9999     14\n","\n","[10000 rows x 1 columns]"]},"metadata":{},"execution_count":38}]},{"cell_type":"code","metadata":{"id":"vdHp3dQuz9bs"},"source":["df.to_csv('/content/drive/MyDrive/Redes TPS/TP3/submission_dag.csv')"],"execution_count":null,"outputs":[]}]}